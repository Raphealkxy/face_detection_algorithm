#pragma warning(disable:4996)   
#include"com_timmy_JavaCvDemo_JavaCvDemo.h"
#include <jni.h>
#include<stdio.h>
#include <opencv/highgui.h>
#include <opencv/cv.h>
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/objdetect/objdetect.hpp>

using namespace cv;

IplImage* image;
IplImage* copyimage;
static CvHaarClassifierCascade* cascade = 0;
static CvMemStorage* storage = 0;
const char* cascade_name="";
const char* filename = "";

void detect_and_draw(IplImage* img);//声明函数

JNIEXPORT void JNICALL Java_com_timmy_JavaCvDemo_JavaCvDemo_detectFace
(JNIEnv * env, jobject obj, jstring cascade1, jstring filename1)
{
	cascade_name = env->GetStringUTFChars(cascade1, false);
	filename = env->GetStringUTFChars(filename1, false);
	cascade = (CvHaarClassifierCascade*)cvLoad(cascade_name, 0, 0, 0);
	//加载人脸检测所用的分类器
	if (!cascade)
	{
		fprintf(stderr, "ERROR: Could not load classifier cascade\n");
		//return -1;
	}
	storage = cvCreateMemStorage(0);
	//动态存储结构，用于存储人脸在图像中的位置

	image = cvLoadImage(filename);
	copyimage = cvCreateImage(cvGetSize(image), image->depth, image->nChannels);
	if (!image)
	//	return -1;
	cvNamedWindow("Original Image", 1);
	cvShowImage("Original Image", image);

	detect_and_draw(image);
	//对加载图像进行检测

	cvWaitKey();

	image = NULL;
	//如image是用cvCreateImage()创建的，那么用cvReleaseImage()释放;若不是"创建"的,就不能“释放”
	//cvDestroyWindow("Original Image");
	//return 1;

}

void detect_and_draw(IplImage* img)
{
	static CvScalar colors[] =
	{
		{ { 0, 0, 255 } },
		{ { 0, 128, 255 } },
		{ { 0, 255, 255 } },
		{ { 0, 255, 0 } },
		{ { 255, 128, 0 } },
		{ { 255, 255, 0 } },
		{ { 255, 0, 0 } },
		{ { 255, 0, 255 } }
	};

	double scale = 1.3;

	cvCopy(img, copyimage);
	IplImage * gray = cvCreateImage(cvSize(copyimage->width, copyimage->height), 8, 1);

	cvCvtColor(copyimage, gray, CV_BGR2GRAY);
	cvClearMemStorage(storage);

	if (cascade)
	{
		CvSeq* faces = cvHaarDetectObjects(gray, cascade, storage, 1.1, 2, CV_HAAR_DO_CANNY_PRUNING, cvSize(20, 20));
		//char numb ;
		//mkdir(path)
		for (int i = 0; i < (faces ? faces->total : 0); i++)
		{
			char *faceName = new char[20];
			sprintf(faceName, "D:\\images\\%d.jpg", i);
			CvRect* r = (CvRect*)cvGetSeqElem(faces, i);
			cvRectangle(copyimage, cvPoint(r->x, r->y), cvPoint(r->x + r->width, r->y + r->height), CV_RGB(255, 0, 0), 3);
			cvSetImageROI(img, cvRect(r->x, r->y, r->width, r->height));//在目标图像中截出人脸区域
			IplImage* face = cvCreateImage(cvSize(r->width, r->height), img->depth, img->nChannels);
			cvCopy(img, face);
			cvResetImageROI(img);//释放目标图像，否则img为截的小区域，后续人脸不能实现检测。
			//faceName = strcat(faceName,(char*)i);
			//faceName = strcat(faceName,".jpg");

			//int length = name.length();
			//char *faceName = new char[length+1];// = "img\\";
			//strcpy(faceName,name.c_str());

			cvSaveImage(faceName, face);
		}
	}
	//cvNamedWindow("result", 1);
	//cvShowImage("result", copyimage);
	copyimage = NULL;
	cvReleaseImage(&gray);
}